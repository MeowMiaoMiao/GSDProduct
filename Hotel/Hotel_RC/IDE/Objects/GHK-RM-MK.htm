<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\GHK-RM-MK.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\GHK-RM-MK.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Mon Jun 27 16:15:36 2016
<BR><P>
<H3>Maximum Stack Usage =        384 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; IrTask &rArr; AssocSet &rArr; AssocStoreSave &rArr; ScrKeyAssocBackup &rArr; FlashWriteData &rArr; sectorPrepare
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[1e]">ADC_A_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">ADC_A_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC_A_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[13]">ADC_B_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[20]">BOD_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[16]">CT16B0_IRQHandler</a> from interrupt.o(i.CT16B0_IRQHandler) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[17]">CT16B1_IRQHandler</a> from interrupt.o(i.CT16B1_IRQHandler) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[18]">CT32B0_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[19]">CT32B1_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[21]">FLASH_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[25]">GPIO0_IRQHandler</a> from interrupt.o(i.GPIO0_IRQHandler) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[24]">GPIO1_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[23]">GPIO2_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[22]">GPIO3_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[15]">I2C_IRQHandler</a> from i2cint.o(i.I2C_IRQHandler) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[6]">PIO0_0_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[10]">PIO0_10_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[11]">PIO0_11_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[7]">PIO0_1_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[8]">PIO0_2_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[9]">PIO0_3_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[a]">PIO0_4_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[b]">PIO0_5_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[c]">PIO0_6_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[d]">PIO0_7_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[e]">PIO0_8_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[f]">PIO0_9_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[12]">PIO1_0_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[1a]">SSP0_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[14]">SSP1_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from interrupt.o(i.SysTick_Handler) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_lpc112x.o(i.SystemInit) referenced from startup_lpc112x.o(.text)
 <LI><a href="#[1b]">UART0_IRQHandler</a> from interrupt.o(i.UART0_IRQHandler) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[1c]">UART1_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[1d]">UART2_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[1f]">WDT_IRQHandler</a> from startup_lpc112x.o(.text) referenced from startup_lpc112x.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc112x.o(.text)
 <LI><a href="#[26]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(.text)
</UL>
<P><STRONG><a name="[d6]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[29]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[35]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d7]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[d8]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[d9]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[da]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[db]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC_A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_A_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_A_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>ADC_B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>CT32B0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>CT32B1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>GPIO1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>GPIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>GPIO3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>PIO0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PIO0_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PIO0_11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PIO0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PIO0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PIO0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PIO0_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PIO0_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PIO0_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PIO0_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PIO0_8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PIO0_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PIO1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc112x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ct16b1_timer_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ct16b0_set_match
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyColorSet
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyColorInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteData
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrBitSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyColorSet
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_rs485
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_rs485_read
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkRecv
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoInit
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_rs485
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_rs485_read
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteData
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>

<P><STRONG><a name="[e3]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[e5]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[37]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[31]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[e6]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[16]"></a>CT16B0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.CT16B0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>CT16B1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, interrupt.o(i.CT16B1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CT16B1_IRQHandler &rArr; handler_irps_send &rArr; board_irps_enable &rArr; ct16b0_set_match &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_irps_send
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_ir_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>ConfKeyInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, conf_key.o(i.ConfKeyInit))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrTask
</UL>

<P><STRONG><a name="[53]"></a>ConfKeyStateSwitch</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, conf_key.o(i.ConfKeyStateSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ConfKeyStateSwitch &rArr; okey_state_switch &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;okey_state_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitIrQuit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyColorSet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrTask
</UL>

<P><STRONG><a name="[55]"></a>DoorCloseFeedback</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, door.o(i.DoorCloseFeedback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DoorCloseFeedback &rArr; NetworkSend &rArr; board_rs485_write_nbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkSend
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoorTask
</UL>

<P><STRONG><a name="[56]"></a>DoorGetSta</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, door.o(i.DoorGetSta))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DoorGetSta
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_bitval
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoorTask
</UL>

<P><STRONG><a name="[a7]"></a>DoorHander</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, door.o(i.DoorHander))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[58]"></a>DoorInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, door.o(i.DoorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DoorInit &rArr; gpio_set_dir
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_ahb_enable
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit
</UL>

<P><STRONG><a name="[5d]"></a>DoorIsCanCheck</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, door.o(i.DoorIsCanCheck))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoorTask
</UL>

<P><STRONG><a name="[5b]"></a>DoorOpenFeedback</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, door.o(i.DoorOpenFeedback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DoorOpenFeedback &rArr; NetworkSend &rArr; board_rs485_write_nbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkSend
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoorTask
</UL>

<P><STRONG><a name="[5c]"></a>DoorTask</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sys.o(i.DoorTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DoorTask &rArr; DoorOpenFeedback &rArr; NetworkSend &rArr; board_rs485_write_nbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoorOpenFeedback
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoorIsCanCheck
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoorGetSta
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoorCloseFeedback
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoIsMaster
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>FlashReadData</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, board_flash.o(i.FlashReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FlashReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyAssocResum
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoInit
</UL>

<P><STRONG><a name="[68]"></a>FlashWriteData</STRONG> (Thumb, 78 bytes, Stack size 280 bytes, board_flash.o(i.FlashWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = FlashWriteData &rArr; sectorPrepare
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sectorPrepare
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sectorErase
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ramCopy
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyAssocClear
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyAssocBackup
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoSetMaster
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoScrBitSave
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoColorSave
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoInit
</UL>

<P><STRONG><a name="[25]"></a>GPIO0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.GPIO0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO0_IRQHandler &rArr; handler_ir
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_ir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>I2C_IRQHandler</STRONG> (Thumb, 540 bytes, Stack size 4 bytes, i2cint.o(i.I2C_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_IRQHandler &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>IrTask</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, sys.o(i.IrTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = IrTask &rArr; AssocSet &rArr; AssocStoreSave &rArr; ScrKeyAssocBackup &rArr; FlashWriteData &rArr; sectorPrepare
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_time_out_wait
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_time_out_set
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_rotate_stop
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_rotate_start
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_key_scan
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_ir_get
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsWake
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfKeyStateSwitch
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfKeyInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_quit_clear
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_entry_clear
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrBitSet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterSet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCheck
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyColorSet
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocSet
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkSend
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkRecv
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_wdt_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>KeyColorInit</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, keycolor.o(i.KeyColorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = KeyColorInit &rArr; board_led_forelight_set &rArr; board_wdt_feed
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_forelight_set
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_backlight_set
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrBitSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyColorSet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoInit
</UL>

<P><STRONG><a name="[81]"></a>KeyTask</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sys.o(i.KeyTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = KeyTask &rArr; ScrKeyProcess &rArr; ScrKeyStateOpen &rArr; ScrKeyMutexOther &rArr; ScrKeyStateClose &rArr; board_led_close &rArr; board_led_display &rArr; et6290_send_cmd &rArr; et6290b_send_cmd &rArr; et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_key_scan
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyStateSwitch
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyProcess
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsWake
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>NetWorkAssocRun</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sys.o(i.NetWorkAssocRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = NetWorkAssocRun &rArr; ScrKeyStateOpen &rArr; ScrKeyMutexOther &rArr; ScrKeyStateClose &rArr; board_led_close &rArr; board_led_display &rArr; et6290_send_cmd &rArr; et6290b_send_cmd &rArr; et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyStateOpen
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyStateClose
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoIsMaster
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkSend
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocSet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWorkTask
</UL>

<P><STRONG><a name="[89]"></a>NetWorkTask</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, sys.o(i.NetWorkTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = NetWorkTask &rArr; AssocSet &rArr; AssocStoreSave &rArr; ScrKeyAssocBackup &rArr; FlashWriteData &rArr; sectorPrepare
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsWake
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoIsMaster
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWorkAssocRun
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_quit_clear
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_entry_clear
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWorkLoadRun
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocSet
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkRecv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>NetworkInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, network.o(i.NetworkInit))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>NetworkRecv</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, network.o(i.NetworkRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NetworkRecv &rArr; board_rs485_read
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_rs485_read
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitIrQuit
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocSet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWorkTask
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrTask
</UL>

<P><STRONG><a name="[3b]"></a>NetworkSend</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, network.o(i.NetworkSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NetworkSend &rArr; board_rs485_write_nbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_rs485_write_nbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyMutexOther
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocRun
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyProcess
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoorOpenFeedback
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoorCloseFeedback
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWorkAssocRun
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitIrQuit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWorkLoadRun
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocSet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrTask
</UL>

<P><STRONG><a name="[a4]"></a>PsHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ps.o(i.PsHandler))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[9f]"></a>PsInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ps.o(i.PsInit))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoInit
</UL>

<P><STRONG><a name="[8c]"></a>PsOff</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ps.o(i.PsOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PsOff &rArr; board_irps_stop &rArr; board_irps_disable &rArr; ct16b0_set_match &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_irps_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsWake
</UL>

<P><STRONG><a name="[8e]"></a>PsReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ps.o(i.PsReset))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsWake
</UL>

<P><STRONG><a name="[71]"></a>PsWake</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ps.o(i.PsWake))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PsWake &rArr; board_led_refresh &rArr; board_led_display &rArr; et6290_send_cmd &rArr; et6290b_send_cmd &rArr; et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_refresh
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_display_en
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsReset
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsOff
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWorkTask
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrTask
</UL>

<P><STRONG><a name="[50]"></a>ScrKeyAssocBackup</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, scr_key.o(i.ScrKeyAssocBackup))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ScrKeyAssocBackup &rArr; FlashWriteData &rArr; sectorPrepare
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocStoreSave
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocStoreDel
</UL>

<P><STRONG><a name="[93]"></a>ScrKeyAssocClear</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, scr_key.o(i.ScrKeyAssocClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ScrKeyAssocClear &rArr; FlashWriteData &rArr; sectorPrepare
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoScrBitSave
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoInit
</UL>

<P><STRONG><a name="[94]"></a>ScrKeyAssocResum</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, scr_key.o(i.ScrKeyAssocResum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ScrKeyAssocResum &rArr; FlashReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyResum
</UL>

<P><STRONG><a name="[96]"></a>ScrKeyClear</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, scr_key.o(i.ScrKeyClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ScrKeyClear
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;okey_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyInit
</UL>

<P><STRONG><a name="[45]"></a>ScrKeyHaveOpen</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, scr_key.o(i.ScrKeyHaveOpen))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocSet
</UL>

<P><STRONG><a name="[92]"></a>ScrKeyInit</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, scr_key.o(i.ScrKeyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ScrKeyInit &rArr; ScrKeyClear
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_light_register
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyClear
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrBitSet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoInit
</UL>

<P><STRONG><a name="[99]"></a>ScrKeyMutexOther</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, scr_key.o(i.ScrKeyMutexOther))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ScrKeyMutexOther &rArr; ScrKeyStateClose &rArr; board_led_close &rArr; board_led_display &rArr; et6290_send_cmd &rArr; et6290b_send_cmd &rArr; et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyStateClose
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkSend
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyStateOpen
</UL>

<P><STRONG><a name="[82]"></a>ScrKeyProcess</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, scr_key.o(i.ScrKeyProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ScrKeyProcess &rArr; ScrKeyStateOpen &rArr; ScrKeyMutexOther &rArr; ScrKeyStateClose &rArr; board_led_close &rArr; board_led_display &rArr; et6290_send_cmd &rArr; et6290b_send_cmd &rArr; et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocRun
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyStateOpen
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyStateClose
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoIsMaster
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkSend
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask
</UL>

<P><STRONG><a name="[9a]"></a>ScrKeyResum</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, scr_key.o(i.ScrKeyResum))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ScrKeyResum &rArr; ScrKeyAssocResum &rArr; FlashReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyAssocResum
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoInit
</UL>

<P><STRONG><a name="[87]"></a>ScrKeyStateClose</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, scr_key.o(i.ScrKeyStateClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ScrKeyStateClose &rArr; board_led_close &rArr; board_led_display &rArr; et6290_send_cmd &rArr; et6290b_send_cmd &rArr; et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_light_close
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_flash_del
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_close
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyMutexOther
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyProcess
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWorkAssocRun
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWorkLoadRun
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitTask
</UL>

<P><STRONG><a name="[47]"></a>ScrKeyStateNone</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, scr_key.o(i.ScrKeyStateNone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ScrKeyStateNone &rArr; board_light_close &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_light_close
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_flash_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocSet
</UL>

<P><STRONG><a name="[46]"></a>ScrKeyStateOpen</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, scr_key.o(i.ScrKeyStateOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ScrKeyStateOpen &rArr; ScrKeyMutexOther &rArr; ScrKeyStateClose &rArr; board_led_close &rArr; board_led_display &rArr; et6290_send_cmd &rArr; et6290b_send_cmd &rArr; et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_light_open
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyMutexOther
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_open
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_flash_del
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyProcess
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWorkAssocRun
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWorkLoadRun
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocSet
</UL>

<P><STRONG><a name="[44]"></a>ScrKeyStateSwitch</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, scr_key.o(i.ScrKeyStateSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ScrKeyStateSwitch &rArr; okey_state_switch &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;okey_state_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocSet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask
</UL>

<P><STRONG><a name="[80]"></a>SysInfoColorSave</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sys.o(i.SysInfoColorSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SysInfoColorSave &rArr; FlashWriteData &rArr; sectorPrepare
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyColorSet
</UL>

<P><STRONG><a name="[9d]"></a>SysInfoInit</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, sys.o(i.SysInfoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SysInfoInit &rArr; ScrKeyAssocClear &rArr; FlashWriteData &rArr; sectorPrepare
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyResum
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyAssocClear
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyColorInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteData
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadData
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoDefault
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>SysInfoIsMaster</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sys.o(i.SysInfoIsMaster))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyProcess
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWorkAssocRun
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterSet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWorkTask
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoorTask
</UL>

<P><STRONG><a name="[91]"></a>SysInfoScrBitSave</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sys.o(i.SysInfoScrBitSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SysInfoScrBitSave &rArr; ScrKeyAssocClear &rArr; FlashWriteData &rArr; sectorPrepare
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyAssocClear
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrBitSet
</UL>

<P><STRONG><a name="[86]"></a>SysInfoSetMaster</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sys.o(i.SysInfoSetMaster))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SysInfoSetMaster &rArr; FlashWriteData &rArr; sectorPrepare
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterSet
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, interrupt.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SysTick_Handler &rArr; handler_rotate_led &rArr; board_led_open &rArr; board_led_display &rArr; et6290_send_cmd &rArr; et6290b_send_cmd &rArr; et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_systick
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_rs485_idle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_rotate_led
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_key_scan
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_flash_led
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDelayHandler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsHandler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoorHander
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, system_lpc112x.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(.text)
</UL>
<P><STRONG><a name="[1b]"></a>UART0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_IRQHandler &rArr; handler_rs485
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_rs485
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc112x.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>WaitDelayHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scr_key.o(i.WaitDelayHandler))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[aa]"></a>WaitTask</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sys.o(i.WaitTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = WaitTask &rArr; ScrKeyStateClose &rArr; board_led_close &rArr; board_led_display &rArr; et6290_send_cmd &rArr; et6290b_send_cmd &rArr; et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyStateClose
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[4d]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system_lpc112x.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;okey_state_switch
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyInit
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocSet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWorkTask
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_interrupt
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[e8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[e9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[cd]"></a>board_ir_clean</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board_ir.o(i.board_ir_clean))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_quit_clear
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_entry_clear
</UL>

<P><STRONG><a name="[70]"></a>board_ir_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board_ir.o(i.board_ir_get))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitIrQuit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrBitSet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterSet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCheck
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyColorSet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrTask
</UL>

<P><STRONG><a name="[65]"></a>board_ir_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, board_ir.o(i.board_ir_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = board_ir_init &rArr; gpio_set_interrupt &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_ahb_enable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_interrupt
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_enable_interrupt
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit
</UL>

<P><STRONG><a name="[ad]"></a>board_irps_disable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_ir.o(i.board_irps_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = board_irps_disable &rArr; ct16b0_set_match &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ct16b0_set_match
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_irps_stop
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_irps_send
</UL>

<P><STRONG><a name="[af]"></a>board_irps_enable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_ir.o(i.board_irps_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = board_irps_enable &rArr; ct16b0_set_match &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ct16b0_set_match
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_irps_send
</UL>

<P><STRONG><a name="[8d]"></a>board_irps_stop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, board_ir.o(i.board_irps_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = board_irps_stop &rArr; board_irps_disable &rArr; ct16b0_set_match &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_irps_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsOff
</UL>

<P><STRONG><a name="[3e]"></a>board_key_free_wait</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, board_key.o(i.board_key_free_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = board_key_free_wait &rArr; board_wdt_feed
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_key_scan
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_wdt_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_quit_clear
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrBitSet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyColorSet
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocSet
</UL>

<P><STRONG><a name="[62]"></a>board_key_init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, board_key.o(i.board_key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = board_key_init &rArr; gpio_set_dir
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_ahb_enable
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit
</UL>

<P><STRONG><a name="[43]"></a>board_key_scan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_key.o(i.board_key_scan))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_key_free_wait
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitIrQuit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyColorSet
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocSet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrTask
</UL>

<P><STRONG><a name="[7d]"></a>board_led_backlight_set</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, board_led.o(i.board_led_backlight_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = board_led_backlight_set &rArr; board_wdt_feed
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_wdt_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyColorInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyColorSet
</UL>

<P><STRONG><a name="[7e]"></a>board_led_close</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, board_led.o(i.board_led_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = board_led_close &rArr; board_led_display &rArr; et6290_send_cmd &rArr; et6290b_send_cmd &rArr; et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_display
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_wdt_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_rotate_stop
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_rotate_start
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_flash_stop
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_flash_start
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyStateClose
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitIrQuit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrBitSet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterSet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCheck
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyColorSet
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_rotate_led
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_flash_led
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoInit
</UL>

<P><STRONG><a name="[83]"></a>board_led_display</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, board_led.o(i.board_led_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = board_led_display &rArr; et6290_send_cmd &rArr; et6290b_send_cmd &rArr; et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et6290_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_refresh
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_open
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_close
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCheck
</UL>

<P><STRONG><a name="[8f]"></a>board_led_display_en</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board_led.o(i.board_led_display_en))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsWake
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_init
</UL>

<P><STRONG><a name="[4a]"></a>board_led_flash_add</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board_led.o(i.board_led_flash_add))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyStateNone
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitIrQuit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterSet
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocSet
</UL>

<P><STRONG><a name="[85]"></a>board_led_flash_del</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board_led.o(i.board_led_flash_del))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyStateOpen
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyStateClose
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitIrQuit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrBitSet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterSet
</UL>

<P><STRONG><a name="[3d]"></a>board_led_flash_start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, board_led.o(i.board_led_flash_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = board_led_flash_start &rArr; board_led_close &rArr; board_led_display &rArr; et6290_send_cmd &rArr; et6290b_send_cmd &rArr; et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_close
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrBitSet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterSet
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocSet
</UL>

<P><STRONG><a name="[42]"></a>board_led_flash_stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, board_led.o(i.board_led_flash_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = board_led_flash_stop &rArr; board_led_close &rArr; board_led_display &rArr; et6290_send_cmd &rArr; et6290b_send_cmd &rArr; et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_close
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrBitSet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterSet
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocSet
</UL>

<P><STRONG><a name="[7c]"></a>board_led_forelight_set</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, board_led.o(i.board_led_forelight_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = board_led_forelight_set &rArr; board_wdt_feed
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_wdt_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyColorInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyColorSet
</UL>

<P><STRONG><a name="[63]"></a>board_led_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_led.o(i.board_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = board_led_init &rArr; et6290_init &rArr; gpio_set_dir
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_display_en
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et6290_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit
</UL>

<P><STRONG><a name="[7f]"></a>board_led_open</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, board_led.o(i.board_led_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = board_led_open &rArr; board_led_display &rArr; et6290_send_cmd &rArr; et6290b_send_cmd &rArr; et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_display
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_wdt_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyStateOpen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrBitSet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyColorSet
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_rotate_led
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_flash_led
</UL>

<P><STRONG><a name="[90]"></a>board_led_refresh</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, board_led.o(i.board_led_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = board_led_refresh &rArr; board_led_display &rArr; et6290_send_cmd &rArr; et6290b_send_cmd &rArr; et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_display
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_wdt_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PsWake
</UL>

<P><STRONG><a name="[73]"></a>board_led_rotate_start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, board_led.o(i.board_led_rotate_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = board_led_rotate_start &rArr; board_led_close &rArr; board_led_display &rArr; et6290_send_cmd &rArr; et6290b_send_cmd &rArr; et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_close
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrTask
</UL>

<P><STRONG><a name="[75]"></a>board_led_rotate_stop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, board_led.o(i.board_led_rotate_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = board_led_rotate_stop &rArr; board_led_close &rArr; board_led_display &rArr; et6290_send_cmd &rArr; et6290b_send_cmd &rArr; et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_close
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrTask
</UL>

<P><STRONG><a name="[9b]"></a>board_light_close</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, board_light.o(i.board_light_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = board_light_close &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_bitval
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyStateNone
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyStateClose
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_quit_clear
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_entry_clear
</UL>

<P><STRONG><a name="[b3]"></a>board_light_devinit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board_light.o(i.board_light_devinit))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_light_init
</UL>

<P><STRONG><a name="[66]"></a>board_light_init</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, board_light.o(i.board_light_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = board_light_init &rArr; gpio_set_dir
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_ahb_enable
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_light_devinit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_dir
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_bitval
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit
</UL>

<P><STRONG><a name="[9c]"></a>board_light_open</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, board_light.o(i.board_light_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = board_light_open &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_bitval
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyStateOpen
</UL>

<P><STRONG><a name="[98]"></a>board_light_register</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, board_light.o(i.board_light_register))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyInit
</UL>

<P><STRONG><a name="[64]"></a>board_rs485_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, board_rs485.o(i.board_rs485_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = board_rs485_init &rArr; uart0_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_ahb_enable
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iocon_u0_rxd_loc
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_dir
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_bitval
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit
</UL>

<P><STRONG><a name="[8a]"></a>board_rs485_read</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, board_rs485.o(i.board_rs485_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = board_rs485_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkRecv
</UL>

<P><STRONG><a name="[8b]"></a>board_rs485_write_nbyte</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, board_rs485.o(i.board_rs485_write_nbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = board_rs485_write_nbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkSend
</UL>

<P><STRONG><a name="[cc]"></a>board_time_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_time.o(i.board_time_get))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;okey_state_switch
</UL>

<P><STRONG><a name="[61]"></a>board_time_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, board_time.o(i.board_time_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = board_time_init &rArr; systick_init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ct16b1_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit
</UL>

<P><STRONG><a name="[3f]"></a>board_time_out_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_time.o(i.board_time_out_set))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrBitSet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyColorSet
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocSet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrTask
</UL>

<P><STRONG><a name="[41]"></a>board_time_out_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_time.o(i.board_time_out_wait))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitIrQuit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrBitSet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyColorSet
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocSet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrTask
</UL>

<P><STRONG><a name="[40]"></a>board_wdt_feed</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, board_wdt.o(i.board_wdt_feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = board_wdt_feed
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_refresh
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_open
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_forelight_set
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_close
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_backlight_set
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_key_free_wait
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitIrQuit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrBitSet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterSet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCheck
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyColorSet
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocSet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrTask
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>board_wdt_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, board_wdt.o(i.board_wdt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = board_wdt_init &rArr; wdt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit
</UL>

<P><STRONG><a name="[bb]"></a>ch1_get</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, board_key.o(i.ch1_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ch1_get
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_bitval
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_key_scan
</UL>

<P><STRONG><a name="[bc]"></a>ch1_on</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, board_key.o(i.ch1_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ch1_on &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_bitval
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_key_scan
</UL>

<P><STRONG><a name="[bd]"></a>ch2_get</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, board_key.o(i.ch2_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ch2_get
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_bitval
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_key_scan
</UL>

<P><STRONG><a name="[be]"></a>ch2_on</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, board_key.o(i.ch2_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ch2_on &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_bitval
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_key_scan
</UL>

<P><STRONG><a name="[ae]"></a>ct16b0_set_match</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, timer.o(i.ct16b0_set_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ct16b0_set_match &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_irps_enable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_irps_disable
</UL>

<P><STRONG><a name="[bf]"></a>ct16b1_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.ct16b1_enable))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ct16b1_timer_init
</UL>

<P><STRONG><a name="[b8]"></a>ct16b1_timer_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, timer.o(i.ct16b1_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ct16b1_timer_init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_ahb_enable
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ct16b1_enable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_time_init
</UL>

<P><STRONG><a name="[84]"></a>delay_ms</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCheck
</UL>

<P><STRONG><a name="[c5]"></a>et6290_delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, et6290.o(i.et6290_delay))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et6290b_sendbyte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et6290b_send_cmd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et6290a_sendbyte
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et6290a_send_cmd
</UL>

<P><STRONG><a name="[b1]"></a>et6290_init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, et6290.o(i.et6290_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = et6290_init &rArr; gpio_set_dir
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_ahb_enable
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_init
</UL>

<P><STRONG><a name="[b0]"></a>et6290_send_cmd</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, et6290.o(i.et6290_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = et6290_send_cmd &rArr; et6290b_send_cmd &rArr; et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et6290b_send_cmd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et6290a_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_display
</UL>

<P><STRONG><a name="[c2]"></a>et6290a_send_cmd</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, et6290.o(i.et6290a_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = et6290a_send_cmd &rArr; et6290a_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_bitval
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et6290a_sendbyte
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et6290_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et6290_send_cmd
</UL>

<P><STRONG><a name="[c4]"></a>et6290a_sendbyte</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, et6290.o(i.et6290a_sendbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = et6290a_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_bitval
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et6290_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et6290a_send_cmd
</UL>

<P><STRONG><a name="[c3]"></a>et6290b_send_cmd</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, et6290.o(i.et6290b_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = et6290b_send_cmd &rArr; et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_bitval
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et6290b_sendbyte
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et6290_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et6290_send_cmd
</UL>

<P><STRONG><a name="[c6]"></a>et6290b_sendbyte</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, et6290.o(i.et6290b_sendbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_bitval
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et6290_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et6290b_send_cmd
</UL>

<P><STRONG><a name="[c8]"></a>gpio_clear_interrupt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(i.gpio_clear_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_ir
</UL>

<P><STRONG><a name="[ac]"></a>gpio_enable_interrupt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(i.gpio_enable_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_ir_init
</UL>

<P><STRONG><a name="[57]"></a>gpio_get_bitval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpio.o(i.gpio_get_bitval))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoorGetSta
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_ir
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch2_get
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch1_get
</UL>

<P><STRONG><a name="[c7]"></a>gpio_get_intstatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpio.o(i.gpio_get_intstatus))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_ir
</UL>

<P><STRONG><a name="[b2]"></a>gpio_set_bitval</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gpio.o(i.gpio_set_bitval))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_set_bitval
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_light_open
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_light_close
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_rs485_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_light_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch2_on
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch1_on
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et6290b_sendbyte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et6290b_send_cmd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et6290a_sendbyte
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et6290a_send_cmd
</UL>

<P><STRONG><a name="[5a]"></a>gpio_set_dir</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gpio.o(i.gpio_set_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_set_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_rs485_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_light_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_key_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_ir_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoorInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et6290_init
</UL>

<P><STRONG><a name="[ab]"></a>gpio_set_interrupt</STRONG> (Thumb, 340 bytes, Stack size 8 bytes, gpio.o(i.gpio_set_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_set_interrupt &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_ir_init
</UL>

<P><STRONG><a name="[c9]"></a>handler_delayms</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, board_time.o(i.handler_delayms))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_systick
</UL>

<P><STRONG><a name="[a2]"></a>handler_flash_led</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, board_led.o(i.handler_flash_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = handler_flash_led &rArr; board_led_open &rArr; board_led_display &rArr; et6290_send_cmd &rArr; et6290b_send_cmd &rArr; et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_open
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_close
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6e]"></a>handler_ir</STRONG> (Thumb, 378 bytes, Stack size 8 bytes, board_ir.o(i.handler_ir))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = handler_ir
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_intstatus
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_bitval
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clear_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_IRQHandler
</UL>

<P><STRONG><a name="[51]"></a>handler_ir_tick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board_ir.o(i.handler_ir_tick))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT16B1_IRQHandler
</UL>

<P><STRONG><a name="[52]"></a>handler_irps_send</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, board_ir.o(i.handler_irps_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = handler_irps_send &rArr; board_irps_enable &rArr; ct16b0_set_match &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_irps_enable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_irps_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT16B1_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>handler_key_scan</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, board_key.o(i.handler_key_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = handler_key_scan &rArr; ch2_on &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch2_on
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch2_get
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch1_on
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch1_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a3]"></a>handler_rotate_led</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, board_led.o(i.handler_rotate_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = handler_rotate_led &rArr; board_led_open &rArr; board_led_display &rArr; et6290_send_cmd &rArr; et6290b_send_cmd &rArr; et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_open
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_close
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a8]"></a>handler_rs485</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, board_rs485.o(i.handler_rs485))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = handler_rs485
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>handler_rs485_idle</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, board_rs485.o(i.handler_rs485_idle))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a0]"></a>handler_systick</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, board_time.o(i.handler_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = handler_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_timeout
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ca]"></a>handler_timeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, board_time.o(i.handler_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_systick
</UL>

<P><STRONG><a name="[b4]"></a>iocon_u0_rxd_loc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iocon.o(i.iocon_u0_rxd_loc))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_rs485_init
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = main &rArr; IrTask &rArr; AssocSet &rArr; AssocStoreSave &rArr; ScrKeyAssocBackup &rArr; FlashWriteData &rArr; sectorPrepare
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_wdt_feed
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitTask
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWorkTask
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrTask
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoorTask
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[97]"></a>okey_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board_key.o(i.okey_clear))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyClear
</UL>

<P><STRONG><a name="[54]"></a>okey_state_switch</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, board_key.o(i.okey_state_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = okey_state_switch &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyStateSwitch
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfKeyStateSwitch
</UL>

<P><STRONG><a name="[6d]"></a>ramCopy</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, iap.o(i.ramCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ramCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteData
</UL>

<P><STRONG><a name="[6c]"></a>sectorErase</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, iap.o(i.sectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sectorErase
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteData
</UL>

<P><STRONG><a name="[6b]"></a>sectorPrepare</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, iap.o(i.sectorPrepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sectorPrepare
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteData
</UL>

<P><STRONG><a name="[59]"></a>syscon_ahb_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, syscon.o(i.syscon_ahb_enable))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_rs485_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_light_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_key_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_ir_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoorInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ct16b1_timer_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et6290_init
</UL>

<P><STRONG><a name="[d3]"></a>syscon_pd_on</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, syscon.o(i.syscon_pd_on))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init
</UL>

<P><STRONG><a name="[cf]"></a>syscon_uart0_div</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, syscon.o(i.syscon_uart0_div))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[d4]"></a>syscon_wdt_clk_update</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, syscon.o(i.syscon_wdt_clk_update))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init
</UL>

<P><STRONG><a name="[d5]"></a>syscon_wdt_div</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, syscon.o(i.syscon_wdt_div))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init
</UL>

<P><STRONG><a name="[d2]"></a>syscon_wdt_osc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, syscon.o(i.syscon_wdt_osc))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init
</UL>

<P><STRONG><a name="[b7]"></a>systick_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, systick.o(i.systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = systick_init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_time_init
</UL>

<P><STRONG><a name="[b5]"></a>uart0_init</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, uart.o(i.uart0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = uart0_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_ahb_enable
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_uart0_div
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_rs485_init
</UL>

<P><STRONG><a name="[b6]"></a>uart0_send_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(i.uart0_send_byte))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_rs485_write_nbyte
</UL>

<P><STRONG><a name="[b9]"></a>wdt_feed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wdt.o(i.wdt_feed))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_wdt_feed
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init
</UL>

<P><STRONG><a name="[ba]"></a>wdt_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wdt.o(i.wdt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wdt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_ahb_enable
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_feed
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_wdt_osc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_wdt_div
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_wdt_clk_update
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_pd_on
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_wdt_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5f]"></a>DriverInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.DriverInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DriverInit &rArr; board_rs485_init &rArr; uart0_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_wdt_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_time_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_rs485_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_light_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_key_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_ir_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoorInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogInit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>LogInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.LogInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LogInit
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_ahb_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit
</UL>

<P><STRONG><a name="[a9]"></a>AssocMainkeyCreate</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sys.o(i.AssocMainkeyCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AssocMainkeyCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitIrQuit
</UL>

<P><STRONG><a name="[3c]"></a>AssocSet</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, sys.o(i.AssocSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = AssocSet &rArr; AssocStoreSave &rArr; ScrKeyAssocBackup &rArr; FlashWriteData &rArr; sectorPrepare
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_time_out_wait
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_time_out_set
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_flash_stop
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_flash_start
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_flash_add
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_key_scan
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_key_free_wait
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyStateSwitch
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyStateOpen
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyStateNone
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyHaveOpen
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWorkAssocRun
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitNetQuit
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitIrQuit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocStoreSave
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocStoreDel
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkSend
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkRecv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_wdt_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWorkTask
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrTask
</UL>

<P><STRONG><a name="[4f]"></a>AssocStoreDel</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sys.o(i.AssocStoreDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = AssocStoreDel &rArr; ScrKeyAssocBackup &rArr; FlashWriteData &rArr; sectorPrepare
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyAssocBackup
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocSet
</UL>

<P><STRONG><a name="[4e]"></a>AssocStoreSave</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sys.o(i.AssocStoreSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = AssocStoreSave &rArr; ScrKeyAssocBackup &rArr; FlashWriteData &rArr; sectorPrepare
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyAssocBackup
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocSet
</UL>

<P><STRONG><a name="[79]"></a>KeyColorSet</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, sys.o(i.KeyColorSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = KeyColorSet &rArr; SysInfoColorSave &rArr; FlashWriteData &rArr; sectorPrepare
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_time_out_wait
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_time_out_set
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_open
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_forelight_set
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_close
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_backlight_set
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_key_scan
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_key_free_wait
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_ir_get
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyColorInit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfKeyStateSwitch
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoColorSave
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_wdt_feed
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrTask
</UL>

<P><STRONG><a name="[7a]"></a>LEDCheck</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, sys.o(i.LEDCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LEDCheck &rArr; board_led_close &rArr; board_led_display &rArr; et6290_send_cmd &rArr; et6290b_send_cmd &rArr; et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_display
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_close
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_ir_get
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_wdt_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrTask
</UL>

<P><STRONG><a name="[78]"></a>MasterSet</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, sys.o(i.MasterSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = MasterSet &rArr; SysInfoSetMaster &rArr; FlashWriteData &rArr; sectorPrepare
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_time_out_wait
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_time_out_set
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_open
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_flash_stop
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_flash_start
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_flash_del
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_flash_add
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_close
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_key_scan
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_key_free_wait
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_ir_get
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfKeyStateSwitch
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoSetMaster
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoIsMaster
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_wdt_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrTask
</UL>

<P><STRONG><a name="[88]"></a>NetWorkLoadRun</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, sys.o(i.NetWorkLoadRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = NetWorkLoadRun &rArr; ScrKeyStateOpen &rArr; ScrKeyMutexOther &rArr; ScrKeyStateClose &rArr; board_led_close &rArr; board_led_display &rArr; et6290_send_cmd &rArr; et6290b_send_cmd &rArr; et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyStateOpen
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyStateClose
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkSend
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWorkTask
</UL>

<P><STRONG><a name="[77]"></a>ScrBitSet</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, sys.o(i.ScrBitSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ScrBitSet &rArr; SysInfoScrBitSave &rArr; ScrKeyAssocClear &rArr; FlashWriteData &rArr; sectorPrepare
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_time_out_wait
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_time_out_set
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_open
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_flash_stop
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_flash_start
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_flash_del
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_close
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_key_free_wait
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_ir_get
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyColorInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoScrBitSave
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_wdt_feed
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrTask
</UL>

<P><STRONG><a name="[9e]"></a>SysInfoDefault</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sys.o(i.SysInfoDefault))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoInit
</UL>

<P><STRONG><a name="[4c]"></a>WaitIrQuit</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, sys.o(i.WaitIrQuit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WaitIrQuit &rArr; board_led_close &rArr; board_led_display &rArr; et6290_send_cmd &rArr; et6290b_send_cmd &rArr; et6290b_sendbyte &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_time_out_wait
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_flash_del
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_flash_add
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_close
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_key_scan
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_ir_get
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfKeyStateSwitch
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitNetQuit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocMainkeyCreate
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkSend
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkRecv
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_wdt_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocSet
</UL>

<P><STRONG><a name="[4b]"></a>WaitNetQuit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sys.o(i.WaitNetQuit))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitIrQuit
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssocSet
</UL>

<P><STRONG><a name="[74]"></a>set_entry_clear</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sys.o(i.set_entry_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = set_entry_clear &rArr; board_light_close &rArr; gpio_set_bitval
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_light_close
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_ir_clean
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWorkTask
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrTask
</UL>

<P><STRONG><a name="[76]"></a>set_quit_clear</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sys.o(i.set_quit_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_quit_clear &rArr; board_key_free_wait &rArr; board_wdt_feed
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_light_close
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_key_free_wait
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_ir_clean
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWorkTask
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrTask
</UL>

<P><STRONG><a name="[3a]"></a>AssocRun</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, scr_key.o(i.AssocRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AssocRun &rArr; NetworkSend &rArr; board_rs485_write_nbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkSend
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrKeyProcess
</UL>

<P><STRONG><a name="[ce]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, systick.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_init
</UL>

<P><STRONG><a name="[c0]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ct16b1_timer_init
</UL>

<P><STRONG><a name="[c1]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, timer.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ct16b1_timer_init
</UL>

<P><STRONG><a name="[d0]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>

<P><STRONG><a name="[d1]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, uart.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
